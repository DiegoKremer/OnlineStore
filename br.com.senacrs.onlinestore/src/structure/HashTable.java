package structure;

import java.util.Arrays;

import model.Book;

public class HashTable {

	/* Creates a cell that will store the key and value */

	public class HashCell {

		private long key;
		private Book value;

		public HashCell(long key, Book value) {
			this.key = key;
			this.value = value;
		}

		public long getKey() {
			return key;
		}

		public Book getValue() {
			return value;
		}

		public String toString() {

			return value.toString();

		}

	}

	private int usedCapacity;
	private HashCell[] table;

	/* Main constructor for the Hash Table */

	public HashTable(int initialCapacity) {
		table = new HashCell[initialCapacity];

	}

	/* Insertion method using Cuckoo collision handling */

	public void insert(Book value) {

		/*
		 * Run the first and second functions on the ISBN code from the book
		 * parameter and store on their respective variables
		 */

		int firstHash = hashFunctionOne(value.getISBN());
		int secondHash = hashFunctionTwo(value.getISBN());

		Book tempOldValue;

		/* If position generated by first function is null will then add to it. */

		if (table[firstHash] == null) {
			table[firstHash] = new HashCell(value.getISBN(), value);
			usedCapacity++;
			// checkLoadFactor();

			/* If position not null will try the second function. */
		} else if (table[secondHash] == null) {
			table[secondHash] = new HashCell(value.getISBN(), value);
			usedCapacity++;
			// checkLoadFactor();

			/*
			 * If position from second function also not null will move the
			 * element from the position and arrange a new position for the old
			 * one.
			 */
		} else {
			tempOldValue = table[secondHash].getValue();
			table[secondHash] = new HashCell(value.getISBN(), value);
			// insert(tempOldValue);
			usedCapacity++;
			// checkLoadFactor();
		}

	}

	/* Get the Book based on the provided key */

	public Book get(long key) {

		/*
		 * Run the first and second functions on the key received as parameter
		 * and store in their respective variables
		 */

		int firstHash = hashFunctionOne(key);
		int secondHash = hashFunctionTwo(key);

		/*
		 * Check if the table position of the result of the first function is
		 * not null and the key equals to the one from the slot and return the
		 * value stored there.
		 */

		if (table[firstHash] != null && table[firstHash].getKey() == key) {
			return table[firstHash].getValue();

			/*
			 * If not the same key then it will jump to the position of the
			 * second function and return its value.
			 */

		} else {
			return table[secondHash].getValue();
		}
	}

	private int capacity() {
		return table.length;
	}

	/* Returns the result of the first function to be used on the Hash Table */

	private int hashFunctionOne(long value) {
		int hash;
		int integerValue = 0;
		if (value > Integer.MAX_VALUE) {
			integerValue = convertValueToInt(value);
		} 
		hash = integerValue % capacity();
		return hash;
	}
	
	private int convertValueToInt (long value) {
		String longNumberString = Long.toString(value);
		long newValue = Long.parseLong(longNumberString.substring(0, 4));
		return (int) newValue; 
	}

	/* Returns the result of the second function to be used on the Hash Table */

	private int hashFunctionTwo(long value) {
		int hash;
		int integerValue = 0;
		if (value > Integer.MAX_VALUE) {
			integerValue = convertValueToInt(value);
		} 
		hash = integerValue % (capacity() / 2);
		return hash;
	}

	/*
	 * Method will check current usage percentage of the Hash Table and if it
	 * exceeds 80% will then double its size
	 */

	private void checkLoadFactor() {
		int usage = (usedCapacity / capacity()) * 100;
		if (usage > 80) {
			doubleCapacity(table);
		}
	}

	private HashCell[] doubleCapacity(HashCell[] table) {
		HashCell[] newTable = new HashCell[capacity() * 2];
		System.arraycopy(table, 0, newTable, 0, capacity());
		return newTable;
	}

	public String toString() {
		
		return Arrays.toString(table);

		/*
		 * Loop through the list appending the content while current position is
		 * not empty.
		 */
		/*
		String s = "Posição vazia";
		
		for (int i = 3; i < table.length; i++) {
			if (table[i] == null) {
				System.out.println("Posição vazia");
			} else  
			s = s + table[i].getValue().toString() + "\n";
		} 
		
		return s;
		*/

			/* Return the content of all list positions converted to String type */
		
		
		
		
	}

}
